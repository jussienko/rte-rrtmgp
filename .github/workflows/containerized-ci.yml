name: Continuous integration in a box
on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  Containerized-CI:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rte-kernels: [default, openacc]
        container: ["earthsystemradiation/rte-rrtmgp-ci:ifort","earthsystemradiation/rte-rrtmgp-ci:nvfortran"]
    container:
      image: ${{ matrix.container }}
    env:
      NFHOME: /home/runner/netcdf-fortran
    steps:
    #
    # Checks-out repository under $GITHUB_WORKSPACE
    #
    - uses: actions/checkout@v2
    #
    # Extend the environment initialization script with FCFLAGS
    #
    - name: Set Fortran compiler flags (ifort)
      if: contains(matrix.container, 'ifort')
      run: echo "FCFLAGS=-m64 -g  -traceback -heap-arrays -assume realloc_lhs -extend-source 132 -check bounds,uninit,pointers,stack -stand f08" >> $GITHUB_ENV
    - name: Set Fortran compiler flags (nvfortran)
      if: contains(matrix.container, 'nvfortran')
      run: echo "FCFLAGS=-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk" >> $GITHUB_ENV
    #
    # Configuration
    #
    - name: Configure
      env:
        RTE_KERNELS: ${{ matrix.rte-kernels }}
      run: |
        test ! -f /opt/intel/oneapi/setvars.sh || . /opt/intel/oneapi/setvars.sh
        test "x${RTE_KERNELS}" = xopenacc && enable_gpu=yes || enable_gpu=no
        test "x${FC}" != xifort || export acx_cv_fc_openacc_flag=
        ./configure --disable-silent-rules --disable-examples --enable-tests --with-netcdf-fortran="${NFHOME}" --enable-gpu=$enable_gpu || { cat ./config.log; exit 1; }
    #
    # Build the library
    #
    - name: Build
      run: |
        test ! -f /opt/intel/oneapi/setvars.sh || . /opt/intel/oneapi/setvars.sh
        make
    #
    # Check whether RFMIP files are cached
    #
    - uses: actions/cache@v2
      id: cache-rfmip-files
      with:
        path: ${{ github.workspace }}/.testcache
        key: rfmip-files-autoconf
    #
    # Check the library
    #
    - name: Check
      run: |
        test ! -f /opt/intel/oneapi/setvars.sh || . /opt/intel/oneapi/setvars.sh
        make check
        find . -name '*.test.log' -print -exec cat {} ';'
    #
    # Generate validation plots
    #
    - name: Generate validation plots
      if: contains(matrix.container, 'ifort') && contains(matrix.rte-kernels, 'default')
      run: |
        cd "${GITHUB_WORKSPACE}/tests"
        python validation-plots.py
    #
    # Upload validation plots
    #
    - name: Upload validation plots
      if: contains(matrix.container, 'ifort') && contains(matrix.rte-kernels, 'default')
      uses: actions/upload-artifact@v2
      with:
        name: valdiation-plot
        path: ${{ github.workspace }}/tests/validation-figures.pdf
